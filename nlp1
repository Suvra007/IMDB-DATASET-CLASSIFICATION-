{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled",
      "provenance": [],
      "authorship_tag": "ABX9TyP9PJYSLTurN6dDfG9BzT6H"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "d-QcaAmRJchj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uwcNJ1D3Gsj8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras.datasets import imdb \n",
        "from keras import preprocessing \n",
        "max_features=10000\n",
        "maxlen=500\n",
        "(X,y),(Xt,yt)=imdb.load_data(num_words=max_features) \n",
        "X=preprocessing.sequence.pad_sequences(X,maxlen=maxlen)\n",
        "Xt=preprocessing.sequence.pad_sequences(Xt,maxlen=maxlen)\n",
        "from keras import layers \n",
        "from keras import models \n",
        "model=models.Sequential()\n",
        "model.add(layers.Embedding(max_features,32))\n",
        "model.add(layers.LSTM(32))\n",
        "model.add(layers.Dense(1,activation=\"sigmoid\"))\n",
        "model.compile(optimizer=\"rmsprop\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\n",
        "model.fit(X,y,epochs=10,batch_size=128,validation_split=0.2)\n",
        "yp=model.predict(Xt)\n",
        "print(model.evaluate(Xt,yt))\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}